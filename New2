import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import multivariate_normal

class CVFilter:
    def __init__(self):
        # Initialize filter parameters
        self.Sf = np.zeros((6, 1))  # Filter state vector
        self.pf = np.eye(6)  # Filter state covariance matrix
        self.plant_noise = 20  # Plant noise covariance
        self.H = np.eye(3, 6)  # Measurement matrix
        self.R = np.eye(3)  # Measurement noise covariance
        self.Meas_Time = 0  # Measured time

    def Initialize_Filter_state_covariance(self, x, y, z, vx, vy, vz, time):
        # Initialize filter state
        self.Sf = np.array([[x], [y], [z], [vx], [vy], [vz]])
        self.Meas_Time = time

    def Filter_state_covariance(self, measurements):
        # JPDA algorithm implementation
        if not measurements:
            return self.Sf, None  # Handle case with no measurements

        for measurement in measurements:
            M_rng1, M_az, M_el, M_time = measurement

            # Predict step
            dt = M_time - self.Meas_Time
            Phi = np.eye(6) + np.eye(6) * dt
            Q = np.eye(6) * self.plant_noise
            self.Sf = np.dot(Phi, self.Sf)
            self.pf = np.dot(np.dot(Phi, self.pf), Phi.T) + Q
            self.Meas_Time = M_time  # Update the last measurement time

            # Update step
            Z = np.array([[M_rng1], [M_az], [M_el]])
            Inn = Z - np.dot(self.H, self.Sf)
            S = np.dot(self.H, np.dot(self.pf, self.H.T)) + self.R
            K = np.dot(np.dot(self.pf, self.H.T), np.linalg.inv(S))
            self.Sf = self.Sf + np.dot(K, Inn)
            self.pf = np.dot(np.eye(6) - np.dot(K, self.H), self.pf)

        return self.Sf, measurements[0]  # Return the first measurement as most likely

# Load CSV data
data = pd.read_csv("path_to_your_file.csv")

# Extract measurements and pre-calculated predictions from the DataFrame
measurements = list(zip(data.iloc[:, 7], data.iloc[:, 8], data.iloc[:, 9], data.iloc[:, 10]))
precalculated_ranges = data.iloc[:, 12].tolist()
precalculated_azimuths = data.iloc[:, 13].tolist()
precalculated_elevations = data.iloc[:, 14].tolist()

# Create an instance of the CVFilter class
kalman_filter = CVFilter()

# Define initial state estimates and initialize the filter
initial_state = [0, 0, 0, 0, 0, 0, measurements[0][3]]  # Assume the first time is the start time
kalman_filter.Initialize_Filter_state_covariance(*initial_state)

# Process each measurement
predicted_ranges = []
predicted_azimuths = []
predicted_elevations = []
predicted_times = []
measured_ranges = []
measured_azimuths = []
measured_elevations = []
measured_times = []

for measurement in measurements:
    filtered_state, _ = kalman_filter.Filter_state_covariance([measurement])
    predicted_ranges.append(filtered_state[0, 0])
    predicted_azimuths.append(filtered_state[1, 0])
    predicted_elevations.append(filtered_state[2, 0])
    predicted_times.append(kalman_filter.Meas_Time)
    measured_ranges.append(measurement[0])
    measured_azimuths.append(measurement[1])
    measured_elevations.append(measurement[2])
    measured_times.append(measurement[3])

# Plotting
plt.figure(figsize=(16, 12))

# Plot measured, predicted by Kalman, and pre-calculated ranges
plt.subplot(3, 1, 1)
plt.plot(measured_times, measured_ranges, 'bo-', label='Measured Range')
plt.plot(predicted_times, predicted_ranges, 'r^-', label='Kalman Predicted Range')
plt.plot(measured_times, precalculated_ranges, 'g*-', label='Pre-calculated Range')
plt.xlabel('Time')
plt.ylabel('Range')
plt.title('Comparison of Range Predictions')
plt.legend()

# Plot measured, predicted by Kalman, and pre-calculated azimuths
plt.subplot(3, 1, 2)
plt.plot(measured_times, measured_azimuths, 'bo-', label='Measured Azimuth')
plt.plot(predicted_times, predicted_azimuths, 'r^-', label='Kalman Predicted Azimuth')
plt.plot(measured_times, precalculated_azimuths, 'g*-', label='Pre-calculated Azimuth')
plt.xlabel('Time')
plt.ylabel('Azimuth')
plt.title('Comparison of Azimuth Predictions')
plt.legend()

# Plot measured, predicted by Kalman, and pre-calculated elevations
plt.subplot(3, 1, 3)
plt.plot(measured_times, measured_elevations, 'bo-', label='Measured Elevation')
plt.plot(predicted_times, predicted_elevations, 'r^-', label='Kalman Predicted Elevation')
plt.plot(measured_times, precalculated_elevations, 'g*-', label='Pre-calculated Elevation')
plt.xlabel('Time')
plt.ylabel('Elevation')
plt.title('Comparison of Elevation Predictions')
plt.legend()

plt.tight_layout()
plt.show()
